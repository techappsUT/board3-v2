version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: board3-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: board3
      POSTGRES_PASSWORD: password
      POSTGRES_DB: board3_dev
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U board3 -d board3_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - board3-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: board3-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./scripts/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - board3-network

  # Backend API (Development)
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile.dev
    container_name: board3-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://board3:password@postgres:5432/board3_dev
      REDIS_URL: redis://redis:6379
      JWT_SECRET: development-jwt-secret-key-here-min-32-characters
      JWT_REFRESH_SECRET: development-refresh-secret-key-here-min-32-chars
      ENCRYPTION_KEY: development-encryption-key-32chars
      SESSION_SECRET: development-session-secret-key-here-min-32-chars
      FRONTEND_URL: http://localhost:3000
    ports:
      - "3001:3001"
    volumes:
      - ./apps/backend:/app/apps/backend
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/backend/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - board3-network
    profiles:
      - backend

  # Frontend (Development)
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile.dev
    container_name: board3-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001/api
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
      NEXT_PUBLIC_APP_URL: http://localhost:3000
    ports:
      - "3000:3000"
    volumes:
      - ./apps/frontend:/app/apps/frontend
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/frontend/node_modules
    depends_on:
      - backend
    networks:
      - board3-network
    profiles:
      - frontend

  # MinIO for local S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: board3-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - board3-network
    profiles:
      - storage

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: board3-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./scripts/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - board3-network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: board3-grafana
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./scripts/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - board3-network
    profiles:
      - monitoring

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: board3-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - board3-network
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  board3-network:
    driver: bridge